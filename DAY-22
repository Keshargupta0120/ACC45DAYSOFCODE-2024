def longest_palindromic_subsequence(s):
    n = len(s)
    dp = [[0] * n for _ in range(n)]
    
    # Every single character is a palindrome of length 1
    for i in range(n):
        dp[i][i] = 1
    
    # Check palindromes of length 2 or more
    for length in range(2, n + 1):
        for i in range(n - length + 1):
            j = i + length - 1
            if s[i] == s[j]:
                dp[i][j] = 2 + dp[i + 1][j - 1]
            else:
                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])
    
    return dp[0][n - 1]

def solve():
    t = int(input())  # Number of test cases
    for _ in range(t):
        n = int(input())  # Length of the string
        s = input().strip()  # The string itself
        
        # Check if string is already a palindrome
        if s == s[::-1]:
            # If the string is already a palindrome, we can delete at most one character
            if n > 1:
                print(n - 1)
            else:
                print(-1)
        else:
            # Calculate the length of the longest palindromic subsequence
            lps_length = longest_palindromic_subsequence(s)
            # Maximum length of subsequence that can be deleted is n - lps_length
            if lps_length > 1:
                print(n - lps_length)
            else:
                print(-1)

# Input example
solve()
